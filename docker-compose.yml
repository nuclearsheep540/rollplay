version: "3.8"

services:
  nginx:
    hostname: nginx
    env_file:
      - .env
    image: ghcr.io/nuclearsheep540/rollplay/nginx:${nginx_version}
    build:
      context: ./docker/prod/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    restart: unless-stopped
    depends_on:
      - api-game
      - api-site
      - api-auth
      - app
    networks:
      - default
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot

  api-game:
    hostname: api-game
    env_file:
      - .env
    container_name: "api-game"
    image: ghcr.io/nuclearsheep540/rollplay/api-game:${api_game_version}
    build:
      context: ./api-game
      dockerfile: ../docker/prod/api-game/Dockerfile
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - default

  api-site:
    hostname: api-site
    env_file:
      - .env
    container_name: "api-site"
    image: ghcr.io/nuclearsheep540/rollplay/api-site:${api_site_version}
    build:
      context: ./api-site
      dockerfile: ../docker/prod/api-site/Dockerfile
    ports:
      - "8082:8082"
    restart: unless-stopped
    networks:
      - default

  api-auth:
    hostname: api-auth
    env_file:
      - .env
    container_name: "api-auth"
    image: ghcr.io/nuclearsheep540/rollplay/api-auth:${api_auth_version}
    build:
      context: ./api-auth
      dockerfile: ../docker/prod/api-auth/Dockerfile
    ports:
      - "8083:8083"
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - default
      
  app:
    hostname: app
    env_file:
      - .env
    container_name: "rollplay"
    image: ghcr.io/nuclearsheep540/rollplay/rollplay:${app_version}
    build:
      context: ./rollplay
      dockerfile: ../docker/prod/rollplay/Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - default

  mongo:
    restart: always
    env_file:
      - .env
    container_name: "mongo"
    hostname: mongo
    image: ghcr.io/nuclearsheep540/rollplay/db:${mongo_db_version}
    build:
      context: ./docker
      dockerfile: prod/db/Dockerfile
      args:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - db_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - default

  redis:
    image: redis:7-alpine
    container_name: "redis"
    hostname: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - default

  postgres:
    container_name: "postgres"
    hostname: postgres
    image: ghcr.io/nuclearsheep540/rollplay/postgres:${postgres_version}
    build:
      context: ./docker
      dockerfile: prod/postgres/Dockerfile
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: rollplay
        APP_DB_PASSWORD: ${APP_DB_PASSWORD}
    env_file:
      - .env
    environment:
      POSTGRES_DB: rollplay
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - default

  certbot-renewer:
    image: ghcr.io/nuclearsheep540/rollplay/certbot:${certbot_version}
    build:
      context: ./docker/prod/certbot-renewer
      dockerfile: Dockerfile
    container_name: certbot-renewer
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - nginx
    restart: always
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  db_data:
  redis_data:
  postgres_data:
  certbot_data:
  certbot_www:
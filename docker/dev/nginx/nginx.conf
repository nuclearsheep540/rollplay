server {
    # Listen on both HTTP and HTTPS (for IPv4 and, optionally, IPv6)
    listen 80;
    listen 443 ssl;

    # Optionally, listen on IPv6 (if needed)
    listen [::]:80;
    listen [::]:443 ssl;

    server_name localhost;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # WebSocket location block - route all /ws requests to FastAPI
    location /ws/ {
        # Proxy the request to the FastAPI container (which serves websockets)
        proxy_pass http://api:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        # Increase timeouts if needed
        proxy_read_timeout 86400;
    }

    # Proxy requests starting with /api to the FastAPI backend
    location /api/ {
        proxy_pass http://api:8081/;  # "api" is the service name from docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # Optional: Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

        # Handle CORS preflight requests
        if ($request_method = OPTIONS ) {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    location / {
        proxy_pass http://app:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}